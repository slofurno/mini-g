import testLogin from 'secrets'
let authToken = null

export const SET_RESULTS = 'SET_RESULTS'

function _sendMessage(message) {
  return new Promise((resolve, reject) => {
    chrome.runtime.sendMessage(message, res => resolve(res))
  })
}

export function searchFacts(m) {
  return (dispatch, getState) => {
    _sendMessage(m)
      .then(res => dispatch(setResults(res)))
  }
}

function setResults(results) {
  return {
    type: SET_RESULTS,
    results
  }
}

export function maybeSelectFact(factId) {
  return (dispatch, getState) => {
    const matching = ({id}) => id === factId
    const { facts, selectedFacts } = getState()
    if (selectedFacts.filter(matching).length === 0) {
      const [fact] = facts.filter(matching)
      dispatch(setSelectedFacts([...selectedFacts, fact]))
    }
  }
}

export function unselectFact(factId) {
  return (dispatch, getState) => {
    const notMatching = ({id}) => id !== factId
    const { selectedFacts } = getState()
    const rest = selectedFacts.filter(notMatching)
    dispatch(setSelectedFacts(rest))
  }
}

function setSelectedFacts(facts) {
  return {
    type: 'SET_SELECTED_FACTS',
    facts
  }
}

function request(url, opts = { method: 'GET' }) {
  const headers = new Headers()
  headers.append('Content-Type', 'application/json')
  headers.append("Authorization", authToken)
  let options = {...opts, headers}
  return fetch(url, options)
}

const defaultQuery = {query:null,showArchived:null,sorts:null}
const maybeGetToken = link => {
  if (!link) return false
  let next = /<(\S+)>;/.exec(link)
  return next ? next[1] : false
}

export function fetchCards(token) {
  return (dispatch, getState) => {
    _fetchCards()
      .then(res => console.log(res))
  }
}

export function _fetchCards() {
  return new Promise((resolve, reject) => {
    __fetchCards(undefined, undefined, resolve)
  })
}

export function _fetchCard({id}) {
  const url = `https://api.getguru.com/api/v1/cards/${id}`
  const boardUrl = `${url}/boards`
  const getCard = request(url)
    .then(res => res.json())
  const getBoards = request(boardUrl)
    .then(res => res.json())

  //tags default is undefined
  return Promise.all([getCard, getBoards])
    .then(([card, boards]) => ({...{tags: []}, ...card, ...{boards: boards}}))
}

export function _fetchFacts(ids) {
  console.log(ids)
  const url = 'https://api.getguru.com/api/v1/cards/bulk'
  const options = {
    method: 'POST',
    body: JSON.stringify({ids})
  }
  return request(url, options)
}

const queryUrl = 'https://api.getguru.com/api/v1/search/query'
function __fetchCards(ret = [], url = queryUrl, done) {
  const options = {
    method: 'POST',
    body: JSON.stringify(defaultQuery)
  }

  request(url, options)
    .then(res => {
      res.json().then(cur => {
        let nextUrl = maybeGetToken(res.headers.get("Link"))
        let cards = [...ret, ...cur]
        if (nextUrl) {
          __fetchCards(cards, nextUrl, done)
        } else {
          done(cards)
        }
      })
    })
}

export function _setToken(token) {
  authToken = token
}

export function _login() {
  const headers = new Headers()
  headers.append('Content-Type', 'application/json')
  return fetch('https://api.getguru.com/auth/login', {
        method: 'POST',
        headers,
        body: JSON.stringify(testLogin)
      })
  .then(response => response.json())
  .then(({token}) => {
    let unencoded = `${testLogin.email}:${token}`
    let encoded = btoa(unencoded)
    //FIXME: store token
    return {token: `Basic ${encoded}`}
  })
}

export function login() {
  return (dispatch, getState) => {
    _login()
    .then(({token}) => {
      let unencoded = `${testLogin.email}:${token}`
      let encoded = btoa(unencoded)
      //FIXME: store token
      authToken = `Basic ${encoded}`
      //dispatch(setAuthToken(authToken))
      //dispatch(getBoards())
    })
  }
}

export function getBoards() {
  return (dispatch, getState) => {
    request('https://api.getguru.com/api/v1/boards', {method:'GET'})
      .then(res => res.json())
      .then(x => console.log(x))
  }
}

function setAuthToken(token) {
  return {
    type: "SET_AUTH_TOKEN",
    token
  }
}

export const saveModalState = {
  modalType: "SAVE",
  modalProps: {
  }
}

export function showSaveModal() {
  return {
    type: "SHOW_MODAL",
    modalState: saveModalState
  }
}

/*
export function _fetchFacts(ids) {
  console.log(ids)
  const url = 'https://api.getguru.com/api/v1/cards/bulk'
  const options = {
    method: 'POST',
    body: JSON.stringify({ids})
  }
  return request(url, options)
    .then(bulkRes => bulkRes.json())
}

const queryUrl = 'https://api.getguru.com/api/v1/search/query'
function __fetchCards(ret = {}, url = queryUrl, done) {
  const options = {
    method: 'POST',
    body: JSON.stringify(defaultQuery)
  }

  request(url, options)
    .then(res => {
      res.json()
      .then(facts => facts.map(({id}) => id))
      .then(_fetchFacts)
      .then(cur => {
        let nextUrl = maybeGetToken(res.headers.get("Link"))
        let cards = {...ret, ...cur}
        if (nextUrl) {
          __fetchCards(cards, nextUrl, done)
        } else {
          done(cards)
        }
      })
    })
}
*/
