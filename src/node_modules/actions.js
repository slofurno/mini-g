import testLogin from 'secrets'
let authToken = null

function sendMessage(message) {
  return new Promise((resolve, reject) => {
    chrome.runtime.sendMessage(message, resolve)
  })
}

export function searchFacts(m) {
  sendMessage(m)
    .then(res => console.log(res))
}

function request(url, opts = {}) {
  const headers = new Headers()
  headers.append('Content-Type', 'application/json')
  headers.append("Authorization", authToken)
  let options = {...opts, headers}
  return fetch(url, options)
}

const defaultQuery = {query:null,showArchived:null,sorts:null}
const maybeGetToken = link => {
  if (!link) return false
  let next = /<(\S+)>;/.exec(link)
  return next ? next[1] : false
}

export function fetchCards(token) {
  return (dispatch, getState) => {
    _fetchCards()
      .then(res => console.log(res))
  }
}

const queryUrl = 'https://api.getguru.com/api/v1/search/query'

function __fetchCards(ret = [], url = queryUrl, done) {
  const options = {
    method: 'POST',
    body: JSON.stringify(defaultQuery)
  }

  request(url, options)
    .then(res => {
      res.json().then(cur => {
        let nextUrl = maybeGetToken(res.headers.get("Link"))
        let cards = [...ret, ...cur]
        if (nextUrl) {
          __fetchCards(cards, nextUrl, done)
        } else {
          done(cards)
        }
      })
    })
}

export function _fetchCards() {
  return new Promise((resolve, reject) => {
    __fetchCards(undefined, undefined, resolve)
  })
}

export function login() {
  return (dispatch, getState) => {
    const headers = new Headers()
    headers.append('Content-Type', 'application/json')
    fetch('https://api.getguru.com/auth/login', {
          method: 'POST',
          headers,
          body: JSON.stringify(testLogin)
        })
    .then(response => response.json())
    .then(({token}) => {
      let unencoded = `slofurno@gmail.com:${token}`
      let encoded = btoa(unencoded)
      authToken = `Basic ${encoded}`
      dispatch(setAuthToken(authToken))
      dispatch(getBoards())
    })
  }
}

export function getBoards() {
  return (dispatch, getState) => {
    request('https://api.getguru.com/api/v1/boards', {method:'GET'})
      .then(res => res.json())
      .then(x => console.log(x))
  }
}

function setAuthToken(token) {
  return {
    type: "SET_AUTH_TOKEN",
    token
  }
}

export const saveModalState = {
  modalType: "SAVE",
  modalProps: {
  }
}

export function showSaveModal() {
  return {
    type: "SHOW_MODAL",
    modalState: saveModalState
  }
}

